// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/09/2019 14:41:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    choose
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module choose_vlg_sample_tst(
	clk,
	filter_type2,
	input_0,
	input_1,
	input_2,
	input_3,
	sampler_tx
);
input  clk;
input [1:0] filter_type2;
input [13:0] input_0;
input [13:0] input_1;
input [13:0] input_2;
input [13:0] input_3;
output sampler_tx;

reg sample;
time current_time;
always @(clk or filter_type2 or input_0 or input_1 or input_2 or input_3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module choose_vlg_check_tst (
	output_final,
	sampler_rx
);
input [13:0] output_final;
input sampler_rx;

reg [13:0] output_final_expected;

reg [13:0] output_final_prev;

reg [13:0] output_final_expected_prev;

reg [13:0] last_output_final_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	output_final_prev = output_final;
end

// update expected /o prevs

always @(trigger)
begin
	output_final_expected_prev = output_final_expected;
end


// expected output_final[ 13 ]
initial
begin
	output_final_expected[13] = 1'bX;
end 
// expected output_final[ 12 ]
initial
begin
	output_final_expected[12] = 1'bX;
end 
// expected output_final[ 11 ]
initial
begin
	output_final_expected[11] = 1'bX;
end 
// expected output_final[ 10 ]
initial
begin
	output_final_expected[10] = 1'bX;
end 
// expected output_final[ 9 ]
initial
begin
	output_final_expected[9] = 1'bX;
end 
// expected output_final[ 8 ]
initial
begin
	output_final_expected[8] = 1'bX;
end 
// expected output_final[ 7 ]
initial
begin
	output_final_expected[7] = 1'bX;
end 
// expected output_final[ 6 ]
initial
begin
	output_final_expected[6] = 1'bX;
end 
// expected output_final[ 5 ]
initial
begin
	output_final_expected[5] = 1'bX;
end 
// expected output_final[ 4 ]
initial
begin
	output_final_expected[4] = 1'bX;
end 
// expected output_final[ 3 ]
initial
begin
	output_final_expected[3] = 1'bX;
end 
// expected output_final[ 2 ]
initial
begin
	output_final_expected[2] = 1'bX;
end 
// expected output_final[ 1 ]
initial
begin
	output_final_expected[1] = 1'bX;
end 
// expected output_final[ 0 ]
initial
begin
	output_final_expected[0] = 1'bX;
end 
// generate trigger
always @(output_final_expected or output_final)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected output_final = %b | ",output_final_expected_prev);
	$display("| real output_final = %b | ",output_final_prev);
`endif
	if (
		( output_final_expected_prev[0] !== 1'bx ) && ( output_final_prev[0] !== output_final_expected_prev[0] )
		&& ((output_final_expected_prev[0] !== last_output_final_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[0] = output_final_expected_prev[0];
	end
	if (
		( output_final_expected_prev[1] !== 1'bx ) && ( output_final_prev[1] !== output_final_expected_prev[1] )
		&& ((output_final_expected_prev[1] !== last_output_final_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[1] = output_final_expected_prev[1];
	end
	if (
		( output_final_expected_prev[2] !== 1'bx ) && ( output_final_prev[2] !== output_final_expected_prev[2] )
		&& ((output_final_expected_prev[2] !== last_output_final_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[2] = output_final_expected_prev[2];
	end
	if (
		( output_final_expected_prev[3] !== 1'bx ) && ( output_final_prev[3] !== output_final_expected_prev[3] )
		&& ((output_final_expected_prev[3] !== last_output_final_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[3] = output_final_expected_prev[3];
	end
	if (
		( output_final_expected_prev[4] !== 1'bx ) && ( output_final_prev[4] !== output_final_expected_prev[4] )
		&& ((output_final_expected_prev[4] !== last_output_final_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[4] = output_final_expected_prev[4];
	end
	if (
		( output_final_expected_prev[5] !== 1'bx ) && ( output_final_prev[5] !== output_final_expected_prev[5] )
		&& ((output_final_expected_prev[5] !== last_output_final_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[5] = output_final_expected_prev[5];
	end
	if (
		( output_final_expected_prev[6] !== 1'bx ) && ( output_final_prev[6] !== output_final_expected_prev[6] )
		&& ((output_final_expected_prev[6] !== last_output_final_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[6] = output_final_expected_prev[6];
	end
	if (
		( output_final_expected_prev[7] !== 1'bx ) && ( output_final_prev[7] !== output_final_expected_prev[7] )
		&& ((output_final_expected_prev[7] !== last_output_final_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[7] = output_final_expected_prev[7];
	end
	if (
		( output_final_expected_prev[8] !== 1'bx ) && ( output_final_prev[8] !== output_final_expected_prev[8] )
		&& ((output_final_expected_prev[8] !== last_output_final_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[8] = output_final_expected_prev[8];
	end
	if (
		( output_final_expected_prev[9] !== 1'bx ) && ( output_final_prev[9] !== output_final_expected_prev[9] )
		&& ((output_final_expected_prev[9] !== last_output_final_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[9] = output_final_expected_prev[9];
	end
	if (
		( output_final_expected_prev[10] !== 1'bx ) && ( output_final_prev[10] !== output_final_expected_prev[10] )
		&& ((output_final_expected_prev[10] !== last_output_final_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[10] = output_final_expected_prev[10];
	end
	if (
		( output_final_expected_prev[11] !== 1'bx ) && ( output_final_prev[11] !== output_final_expected_prev[11] )
		&& ((output_final_expected_prev[11] !== last_output_final_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[11] = output_final_expected_prev[11];
	end
	if (
		( output_final_expected_prev[12] !== 1'bx ) && ( output_final_prev[12] !== output_final_expected_prev[12] )
		&& ((output_final_expected_prev[12] !== last_output_final_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[12] = output_final_expected_prev[12];
	end
	if (
		( output_final_expected_prev[13] !== 1'bx ) && ( output_final_prev[13] !== output_final_expected_prev[13] )
		&& ((output_final_expected_prev[13] !== last_output_final_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[13] = output_final_expected_prev[13];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module choose_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [1:0] filter_type2;
reg [13:0] input_0;
reg [13:0] input_1;
reg [13:0] input_2;
reg [13:0] input_3;
// wires                                               
wire [13:0] output_final;

wire sampler;                             

// assign statements (if any)                          
choose i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.filter_type2(filter_type2),
	.input_0(input_0),
	.input_1(input_1),
	.input_2(input_2),
	.input_3(input_3),
	.output_final(output_final)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// input_0[ 13 ]
initial
begin
	input_0[13] = 1'b1;
end 
// input_0[ 12 ]
initial
begin
	input_0[12] = 1'b0;
end 
// input_0[ 11 ]
initial
begin
	input_0[11] = 1'b0;
end 
// input_0[ 10 ]
initial
begin
	input_0[10] = 1'b0;
end 
// input_0[ 9 ]
initial
begin
	input_0[9] = 1'b0;
end 
// input_0[ 8 ]
initial
begin
	input_0[8] = 1'b0;
end 
// input_0[ 7 ]
initial
begin
	input_0[7] = 1'b0;
end 
// input_0[ 6 ]
initial
begin
	input_0[6] = 1'b0;
end 
// input_0[ 5 ]
initial
begin
	input_0[5] = 1'b0;
end 
// input_0[ 4 ]
initial
begin
	input_0[4] = 1'b0;
end 
// input_0[ 3 ]
initial
begin
	input_0[3] = 1'b0;
end 
// input_0[ 2 ]
initial
begin
	input_0[2] = 1'b0;
end 
// input_0[ 1 ]
initial
begin
	input_0[1] = 1'b0;
end 
// input_0[ 0 ]
initial
begin
	input_0[0] = 1'b0;
end 
// input_1[ 13 ]
initial
begin
	input_1[13] = 1'b0;
end 
// input_1[ 12 ]
initial
begin
	input_1[12] = 1'b1;
end 
// input_1[ 11 ]
initial
begin
	input_1[11] = 1'b0;
end 
// input_1[ 10 ]
initial
begin
	input_1[10] = 1'b0;
end 
// input_1[ 9 ]
initial
begin
	input_1[9] = 1'b0;
end 
// input_1[ 8 ]
initial
begin
	input_1[8] = 1'b0;
end 
// input_1[ 7 ]
initial
begin
	input_1[7] = 1'b0;
end 
// input_1[ 6 ]
initial
begin
	input_1[6] = 1'b0;
end 
// input_1[ 5 ]
initial
begin
	input_1[5] = 1'b0;
end 
// input_1[ 4 ]
initial
begin
	input_1[4] = 1'b0;
end 
// input_1[ 3 ]
initial
begin
	input_1[3] = 1'b0;
end 
// input_1[ 2 ]
initial
begin
	input_1[2] = 1'b0;
end 
// input_1[ 1 ]
initial
begin
	input_1[1] = 1'b0;
end 
// input_1[ 0 ]
initial
begin
	input_1[0] = 1'b0;
end 
// input_2[ 13 ]
initial
begin
	input_2[13] = 1'b0;
end 
// input_2[ 12 ]
initial
begin
	input_2[12] = 1'b0;
end 
// input_2[ 11 ]
initial
begin
	input_2[11] = 1'b1;
end 
// input_2[ 10 ]
initial
begin
	input_2[10] = 1'b0;
end 
// input_2[ 9 ]
initial
begin
	input_2[9] = 1'b0;
end 
// input_2[ 8 ]
initial
begin
	input_2[8] = 1'b0;
end 
// input_2[ 7 ]
initial
begin
	input_2[7] = 1'b0;
end 
// input_2[ 6 ]
initial
begin
	input_2[6] = 1'b0;
end 
// input_2[ 5 ]
initial
begin
	input_2[5] = 1'b0;
end 
// input_2[ 4 ]
initial
begin
	input_2[4] = 1'b0;
end 
// input_2[ 3 ]
initial
begin
	input_2[3] = 1'b0;
end 
// input_2[ 2 ]
initial
begin
	input_2[2] = 1'b0;
end 
// input_2[ 1 ]
initial
begin
	input_2[1] = 1'b0;
end 
// input_2[ 0 ]
initial
begin
	input_2[0] = 1'b0;
end 
// input_3[ 13 ]
initial
begin
	input_3[13] = 1'b0;
end 
// input_3[ 12 ]
initial
begin
	input_3[12] = 1'b0;
end 
// input_3[ 11 ]
initial
begin
	input_3[11] = 1'b0;
end 
// input_3[ 10 ]
initial
begin
	input_3[10] = 1'b1;
end 
// input_3[ 9 ]
initial
begin
	input_3[9] = 1'b0;
end 
// input_3[ 8 ]
initial
begin
	input_3[8] = 1'b0;
end 
// input_3[ 7 ]
initial
begin
	input_3[7] = 1'b0;
end 
// input_3[ 6 ]
initial
begin
	input_3[6] = 1'b0;
end 
// input_3[ 5 ]
initial
begin
	input_3[5] = 1'b0;
end 
// input_3[ 4 ]
initial
begin
	input_3[4] = 1'b0;
end 
// input_3[ 3 ]
initial
begin
	input_3[3] = 1'b0;
end 
// input_3[ 2 ]
initial
begin
	input_3[2] = 1'b0;
end 
// input_3[ 1 ]
initial
begin
	input_3[1] = 1'b0;
end 
// input_3[ 0 ]
initial
begin
	input_3[0] = 1'b0;
end 
// filter_type2[ 1 ]
initial
begin
	filter_type2[1] = 1'b0;
	filter_type2[1] = #180000 1'b1;
	filter_type2[1] = #200000 1'b0;
	filter_type2[1] = #200000 1'b1;
	filter_type2[1] = #260000 1'b0;
end 
// filter_type2[ 0 ]
initial
begin
	filter_type2[0] = 1'b0;
	filter_type2[0] = #100000 1'b1;
	filter_type2[0] = #80000 1'b0;
	filter_type2[0] = #160000 1'b1;
	filter_type2[0] = #40000 1'b0;
	filter_type2[0] = #140000 1'b1;
	filter_type2[0] = #60000 1'b0;
	filter_type2[0] = #160000 1'b1;
	filter_type2[0] = #100000 1'b0;
end 

choose_vlg_sample_tst tb_sample (
	.clk(clk),
	.filter_type2(filter_type2),
	.input_0(input_0),
	.input_1(input_1),
	.input_2(input_2),
	.input_3(input_3),
	.sampler_tx(sampler)
);

choose_vlg_check_tst tb_out(
	.output_final(output_final),
	.sampler_rx(sampler)
);
endmodule

