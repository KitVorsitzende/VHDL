// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/09/2019 15:00:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Filter_gesamt
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Filter_gesamt_vlg_sample_tst(
	clk,
	input,
	taster1,
	sampler_tx
);
input  clk;
input [13:0] input;
input  taster1;
output sampler_tx;

reg sample;
time current_time;
always @(clk or input or taster1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Filter_gesamt_vlg_check_tst (
	output_final,
	output_high,
	output_low,
	sampler_rx
);
input [13:0] output_final;
input [7:0] output_high;
input [7:0] output_low;
input sampler_rx;

reg [13:0] output_final_expected;
reg [7:0] output_high_expected;
reg [7:0] output_low_expected;

reg [13:0] output_final_prev;
reg [7:0] output_high_prev;
reg [7:0] output_low_prev;

reg [13:0] output_final_expected_prev;
reg [7:0] output_high_expected_prev;
reg [7:0] output_low_expected_prev;

reg [13:0] last_output_final_exp;
reg [7:0] last_output_high_exp;
reg [7:0] last_output_low_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	output_final_prev = output_final;
	output_high_prev = output_high;
	output_low_prev = output_low;
end

// update expected /o prevs

always @(trigger)
begin
	output_final_expected_prev = output_final_expected;
	output_high_expected_prev = output_high_expected;
	output_low_expected_prev = output_low_expected;
end


// expected output_final[ 13 ]
initial
begin
	output_final_expected[13] = 1'bX;
end 
// expected output_final[ 12 ]
initial
begin
	output_final_expected[12] = 1'bX;
end 
// expected output_final[ 11 ]
initial
begin
	output_final_expected[11] = 1'bX;
end 
// expected output_final[ 10 ]
initial
begin
	output_final_expected[10] = 1'bX;
end 
// expected output_final[ 9 ]
initial
begin
	output_final_expected[9] = 1'bX;
end 
// expected output_final[ 8 ]
initial
begin
	output_final_expected[8] = 1'bX;
end 
// expected output_final[ 7 ]
initial
begin
	output_final_expected[7] = 1'bX;
end 
// expected output_final[ 6 ]
initial
begin
	output_final_expected[6] = 1'bX;
end 
// expected output_final[ 5 ]
initial
begin
	output_final_expected[5] = 1'bX;
end 
// expected output_final[ 4 ]
initial
begin
	output_final_expected[4] = 1'bX;
end 
// expected output_final[ 3 ]
initial
begin
	output_final_expected[3] = 1'bX;
end 
// expected output_final[ 2 ]
initial
begin
	output_final_expected[2] = 1'bX;
end 
// expected output_final[ 1 ]
initial
begin
	output_final_expected[1] = 1'bX;
end 
// expected output_final[ 0 ]
initial
begin
	output_final_expected[0] = 1'bX;
end 
// expected output_high[ 7 ]
initial
begin
	output_high_expected[7] = 1'bX;
end 
// expected output_high[ 6 ]
initial
begin
	output_high_expected[6] = 1'bX;
end 
// expected output_high[ 5 ]
initial
begin
	output_high_expected[5] = 1'bX;
end 
// expected output_high[ 4 ]
initial
begin
	output_high_expected[4] = 1'bX;
end 
// expected output_high[ 3 ]
initial
begin
	output_high_expected[3] = 1'bX;
end 
// expected output_high[ 2 ]
initial
begin
	output_high_expected[2] = 1'bX;
end 
// expected output_high[ 1 ]
initial
begin
	output_high_expected[1] = 1'bX;
end 
// expected output_high[ 0 ]
initial
begin
	output_high_expected[0] = 1'bX;
end 
// expected output_low[ 7 ]
initial
begin
	output_low_expected[7] = 1'bX;
end 
// expected output_low[ 6 ]
initial
begin
	output_low_expected[6] = 1'bX;
end 
// expected output_low[ 5 ]
initial
begin
	output_low_expected[5] = 1'bX;
end 
// expected output_low[ 4 ]
initial
begin
	output_low_expected[4] = 1'bX;
end 
// expected output_low[ 3 ]
initial
begin
	output_low_expected[3] = 1'bX;
end 
// expected output_low[ 2 ]
initial
begin
	output_low_expected[2] = 1'bX;
end 
// expected output_low[ 1 ]
initial
begin
	output_low_expected[1] = 1'bX;
end 
// expected output_low[ 0 ]
initial
begin
	output_low_expected[0] = 1'bX;
end 
// generate trigger
always @(output_final_expected or output_final or output_high_expected or output_high or output_low_expected or output_low)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected output_final = %b | expected output_high = %b | expected output_low = %b | ",output_final_expected_prev,output_high_expected_prev,output_low_expected_prev);
	$display("| real output_final = %b | real output_high = %b | real output_low = %b | ",output_final_prev,output_high_prev,output_low_prev);
`endif
	if (
		( output_final_expected_prev[0] !== 1'bx ) && ( output_final_prev[0] !== output_final_expected_prev[0] )
		&& ((output_final_expected_prev[0] !== last_output_final_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[0] = output_final_expected_prev[0];
	end
	if (
		( output_final_expected_prev[1] !== 1'bx ) && ( output_final_prev[1] !== output_final_expected_prev[1] )
		&& ((output_final_expected_prev[1] !== last_output_final_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[1] = output_final_expected_prev[1];
	end
	if (
		( output_final_expected_prev[2] !== 1'bx ) && ( output_final_prev[2] !== output_final_expected_prev[2] )
		&& ((output_final_expected_prev[2] !== last_output_final_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[2] = output_final_expected_prev[2];
	end
	if (
		( output_final_expected_prev[3] !== 1'bx ) && ( output_final_prev[3] !== output_final_expected_prev[3] )
		&& ((output_final_expected_prev[3] !== last_output_final_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[3] = output_final_expected_prev[3];
	end
	if (
		( output_final_expected_prev[4] !== 1'bx ) && ( output_final_prev[4] !== output_final_expected_prev[4] )
		&& ((output_final_expected_prev[4] !== last_output_final_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[4] = output_final_expected_prev[4];
	end
	if (
		( output_final_expected_prev[5] !== 1'bx ) && ( output_final_prev[5] !== output_final_expected_prev[5] )
		&& ((output_final_expected_prev[5] !== last_output_final_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[5] = output_final_expected_prev[5];
	end
	if (
		( output_final_expected_prev[6] !== 1'bx ) && ( output_final_prev[6] !== output_final_expected_prev[6] )
		&& ((output_final_expected_prev[6] !== last_output_final_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[6] = output_final_expected_prev[6];
	end
	if (
		( output_final_expected_prev[7] !== 1'bx ) && ( output_final_prev[7] !== output_final_expected_prev[7] )
		&& ((output_final_expected_prev[7] !== last_output_final_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[7] = output_final_expected_prev[7];
	end
	if (
		( output_final_expected_prev[8] !== 1'bx ) && ( output_final_prev[8] !== output_final_expected_prev[8] )
		&& ((output_final_expected_prev[8] !== last_output_final_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[8] = output_final_expected_prev[8];
	end
	if (
		( output_final_expected_prev[9] !== 1'bx ) && ( output_final_prev[9] !== output_final_expected_prev[9] )
		&& ((output_final_expected_prev[9] !== last_output_final_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[9] = output_final_expected_prev[9];
	end
	if (
		( output_final_expected_prev[10] !== 1'bx ) && ( output_final_prev[10] !== output_final_expected_prev[10] )
		&& ((output_final_expected_prev[10] !== last_output_final_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[10] = output_final_expected_prev[10];
	end
	if (
		( output_final_expected_prev[11] !== 1'bx ) && ( output_final_prev[11] !== output_final_expected_prev[11] )
		&& ((output_final_expected_prev[11] !== last_output_final_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[11] = output_final_expected_prev[11];
	end
	if (
		( output_final_expected_prev[12] !== 1'bx ) && ( output_final_prev[12] !== output_final_expected_prev[12] )
		&& ((output_final_expected_prev[12] !== last_output_final_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[12] = output_final_expected_prev[12];
	end
	if (
		( output_final_expected_prev[13] !== 1'bx ) && ( output_final_prev[13] !== output_final_expected_prev[13] )
		&& ((output_final_expected_prev[13] !== last_output_final_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_final[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_final_expected_prev);
		$display ("     Real value = %b", output_final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_final_exp[13] = output_final_expected_prev[13];
	end
	if (
		( output_high_expected_prev[0] !== 1'bx ) && ( output_high_prev[0] !== output_high_expected_prev[0] )
		&& ((output_high_expected_prev[0] !== last_output_high_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_high[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_high_expected_prev);
		$display ("     Real value = %b", output_high_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_high_exp[0] = output_high_expected_prev[0];
	end
	if (
		( output_high_expected_prev[1] !== 1'bx ) && ( output_high_prev[1] !== output_high_expected_prev[1] )
		&& ((output_high_expected_prev[1] !== last_output_high_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_high[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_high_expected_prev);
		$display ("     Real value = %b", output_high_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_high_exp[1] = output_high_expected_prev[1];
	end
	if (
		( output_high_expected_prev[2] !== 1'bx ) && ( output_high_prev[2] !== output_high_expected_prev[2] )
		&& ((output_high_expected_prev[2] !== last_output_high_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_high[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_high_expected_prev);
		$display ("     Real value = %b", output_high_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_high_exp[2] = output_high_expected_prev[2];
	end
	if (
		( output_high_expected_prev[3] !== 1'bx ) && ( output_high_prev[3] !== output_high_expected_prev[3] )
		&& ((output_high_expected_prev[3] !== last_output_high_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_high[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_high_expected_prev);
		$display ("     Real value = %b", output_high_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_high_exp[3] = output_high_expected_prev[3];
	end
	if (
		( output_high_expected_prev[4] !== 1'bx ) && ( output_high_prev[4] !== output_high_expected_prev[4] )
		&& ((output_high_expected_prev[4] !== last_output_high_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_high[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_high_expected_prev);
		$display ("     Real value = %b", output_high_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_high_exp[4] = output_high_expected_prev[4];
	end
	if (
		( output_high_expected_prev[5] !== 1'bx ) && ( output_high_prev[5] !== output_high_expected_prev[5] )
		&& ((output_high_expected_prev[5] !== last_output_high_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_high[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_high_expected_prev);
		$display ("     Real value = %b", output_high_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_high_exp[5] = output_high_expected_prev[5];
	end
	if (
		( output_high_expected_prev[6] !== 1'bx ) && ( output_high_prev[6] !== output_high_expected_prev[6] )
		&& ((output_high_expected_prev[6] !== last_output_high_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_high[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_high_expected_prev);
		$display ("     Real value = %b", output_high_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_high_exp[6] = output_high_expected_prev[6];
	end
	if (
		( output_high_expected_prev[7] !== 1'bx ) && ( output_high_prev[7] !== output_high_expected_prev[7] )
		&& ((output_high_expected_prev[7] !== last_output_high_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_high[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_high_expected_prev);
		$display ("     Real value = %b", output_high_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_high_exp[7] = output_high_expected_prev[7];
	end
	if (
		( output_low_expected_prev[0] !== 1'bx ) && ( output_low_prev[0] !== output_low_expected_prev[0] )
		&& ((output_low_expected_prev[0] !== last_output_low_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_low[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_low_expected_prev);
		$display ("     Real value = %b", output_low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output_low_exp[0] = output_low_expected_prev[0];
	end
	if (
		( output_low_expected_prev[1] !== 1'bx ) && ( output_low_prev[1] !== output_low_expected_prev[1] )
		&& ((output_low_expected_prev[1] !== last_output_low_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_low[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_low_expected_prev);
		$display ("     Real value = %b", output_low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output_low_exp[1] = output_low_expected_prev[1];
	end
	if (
		( output_low_expected_prev[2] !== 1'bx ) && ( output_low_prev[2] !== output_low_expected_prev[2] )
		&& ((output_low_expected_prev[2] !== last_output_low_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_low[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_low_expected_prev);
		$display ("     Real value = %b", output_low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output_low_exp[2] = output_low_expected_prev[2];
	end
	if (
		( output_low_expected_prev[3] !== 1'bx ) && ( output_low_prev[3] !== output_low_expected_prev[3] )
		&& ((output_low_expected_prev[3] !== last_output_low_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_low[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_low_expected_prev);
		$display ("     Real value = %b", output_low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output_low_exp[3] = output_low_expected_prev[3];
	end
	if (
		( output_low_expected_prev[4] !== 1'bx ) && ( output_low_prev[4] !== output_low_expected_prev[4] )
		&& ((output_low_expected_prev[4] !== last_output_low_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_low[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_low_expected_prev);
		$display ("     Real value = %b", output_low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output_low_exp[4] = output_low_expected_prev[4];
	end
	if (
		( output_low_expected_prev[5] !== 1'bx ) && ( output_low_prev[5] !== output_low_expected_prev[5] )
		&& ((output_low_expected_prev[5] !== last_output_low_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_low[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_low_expected_prev);
		$display ("     Real value = %b", output_low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output_low_exp[5] = output_low_expected_prev[5];
	end
	if (
		( output_low_expected_prev[6] !== 1'bx ) && ( output_low_prev[6] !== output_low_expected_prev[6] )
		&& ((output_low_expected_prev[6] !== last_output_low_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_low[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_low_expected_prev);
		$display ("     Real value = %b", output_low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output_low_exp[6] = output_low_expected_prev[6];
	end
	if (
		( output_low_expected_prev[7] !== 1'bx ) && ( output_low_prev[7] !== output_low_expected_prev[7] )
		&& ((output_low_expected_prev[7] !== last_output_low_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_low[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_low_expected_prev);
		$display ("     Real value = %b", output_low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output_low_exp[7] = output_low_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Filter_gesamt_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [13:0] input;
reg taster1;
// wires                                               
wire [13:0] output_final;
wire [7:0] output_high;
wire [7:0] output_low;

wire sampler;                             

// assign statements (if any)                          
Filter_gesamt i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.\input (input),
	.output_final(output_final),
	.output_high(output_high),
	.output_low(output_low),
	.taster1(taster1)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// \input [ 13 ]
initial
begin
	input[13] = 1'b0;
end 
// \input [ 12 ]
initial
begin
	input[12] = 1'b0;
end 
// \input [ 11 ]
initial
begin
	input[11] = 1'b0;
	input[11] = #110000 1'b1;
	input[11] = #20000 1'b0;
	input[11] = #170000 1'b1;
	input[11] = #20000 1'b0;
	input[11] = #210000 1'b1;
	input[11] = #20000 1'b0;
	input[11] = #180000 1'b1;
	input[11] = #20000 1'b0;
end 
// \input [ 10 ]
initial
begin
	input[10] = 1'b0;
end 
// \input [ 9 ]
initial
begin
	input[9] = 1'b0;
end 
// \input [ 8 ]
initial
begin
	input[8] = 1'b0;
end 
// \input [ 7 ]
initial
begin
	input[7] = 1'b0;
end 
// \input [ 6 ]
initial
begin
	input[6] = 1'b0;
end 
// \input [ 5 ]
initial
begin
	input[5] = 1'b0;
end 
// \input [ 4 ]
initial
begin
	input[4] = 1'b0;
end 
// \input [ 3 ]
initial
begin
	input[3] = 1'b0;
end 
// \input [ 2 ]
initial
begin
	input[2] = 1'b0;
end 
// \input [ 1 ]
initial
begin
	input[1] = 1'b0;
end 
// \input [ 0 ]
initial
begin
	input[0] = 1'b0;
end 

// taster1
initial
begin
	taster1 = 1'b1;
	taster1 = #180000 1'b0;
	taster1 = #20000 1'b1;
	taster1 = #210000 1'b0;
	taster1 = #20000 1'b1;
	taster1 = #170000 1'b0;
	taster1 = #20000 1'b1;
	taster1 = #200000 1'b0;
	taster1 = #20000 1'b1;
end 

Filter_gesamt_vlg_sample_tst tb_sample (
	.clk(clk),
	.input(input),
	.taster1(taster1),
	.sampler_tx(sampler)
);

Filter_gesamt_vlg_check_tst tb_out(
	.output_final(output_final),
	.output_high(output_high),
	.output_low(output_low),
	.sampler_rx(sampler)
);
endmodule

