// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/12/2019 21:14:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Faltungscodierer_gesamt
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Faltungscodierer_gesamt_vlg_sample_tst(
	clock,
	input,
	reset,
	sampler_tx
);
input  clock;
input  input;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clock or input or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Faltungscodierer_gesamt_vlg_check_tst (
	out_a,
	out_high,
	out_low,
	out_v,
	sampler_rx
);
input [1:0] out_a;
input  out_high;
input  out_low;
input [1:0] out_v;
input sampler_rx;

reg [1:0] out_a_expected;
reg  out_high_expected;
reg  out_low_expected;
reg [1:0] out_v_expected;

reg [1:0] out_a_prev;
reg  out_high_prev;
reg  out_low_prev;
reg [1:0] out_v_prev;

reg [1:0] out_a_expected_prev;
reg  out_high_expected_prev;
reg  out_low_expected_prev;
reg [1:0] out_v_expected_prev;

reg [1:0] last_out_a_exp;
reg  last_out_high_exp;
reg  last_out_low_exp;
reg [1:0] last_out_v_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	out_a_prev = out_a;
	out_high_prev = out_high;
	out_low_prev = out_low;
	out_v_prev = out_v;
end

// update expected /o prevs

always @(trigger)
begin
	out_a_expected_prev = out_a_expected;
	out_high_expected_prev = out_high_expected;
	out_low_expected_prev = out_low_expected;
	out_v_expected_prev = out_v_expected;
end



// expected out_high
initial
begin
	out_high_expected = 1'bX;
end 

// expected out_low
initial
begin
	out_low_expected = 1'bX;
end 
// expected out_a[ 1 ]
initial
begin
	out_a_expected[1] = 1'bX;
end 
// expected out_a[ 0 ]
initial
begin
	out_a_expected[0] = 1'bX;
end 
// generate trigger
always @(out_a_expected or out_a or out_high_expected or out_high or out_low_expected or out_low or out_v_expected or out_v)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected out_a = %b | expected out_high = %b | expected out_low = %b | expected out_v = %b | ",out_a_expected_prev,out_high_expected_prev,out_low_expected_prev,out_v_expected_prev);
	$display("| real out_a = %b | real out_high = %b | real out_low = %b | real out_v = %b | ",out_a_prev,out_high_prev,out_low_prev,out_v_prev);
`endif
	if (
		( out_a_expected_prev[0] !== 1'bx ) && ( out_a_prev[0] !== out_a_expected_prev[0] )
		&& ((out_a_expected_prev[0] !== last_out_a_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_a[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_a_expected_prev);
		$display ("     Real value = %b", out_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_a_exp[0] = out_a_expected_prev[0];
	end
	if (
		( out_a_expected_prev[1] !== 1'bx ) && ( out_a_prev[1] !== out_a_expected_prev[1] )
		&& ((out_a_expected_prev[1] !== last_out_a_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_a[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_a_expected_prev);
		$display ("     Real value = %b", out_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_a_exp[1] = out_a_expected_prev[1];
	end
	if (
		( out_high_expected_prev !== 1'bx ) && ( out_high_prev !== out_high_expected_prev )
		&& ((out_high_expected_prev !== last_out_high_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_high :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_high_expected_prev);
		$display ("     Real value = %b", out_high_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_high_exp = out_high_expected_prev;
	end
	if (
		( out_low_expected_prev !== 1'bx ) && ( out_low_prev !== out_low_expected_prev )
		&& ((out_low_expected_prev !== last_out_low_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_low :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_low_expected_prev);
		$display ("     Real value = %b", out_low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_low_exp = out_low_expected_prev;
	end
	if (
		( out_v_expected_prev[0] !== 1'bx ) && ( out_v_prev[0] !== out_v_expected_prev[0] )
		&& ((out_v_expected_prev[0] !== last_out_v_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_v[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_v_expected_prev);
		$display ("     Real value = %b", out_v_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_v_exp[0] = out_v_expected_prev[0];
	end
	if (
		( out_v_expected_prev[1] !== 1'bx ) && ( out_v_prev[1] !== out_v_expected_prev[1] )
		&& ((out_v_expected_prev[1] !== last_out_v_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_v[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_v_expected_prev);
		$display ("     Real value = %b", out_v_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_v_exp[1] = out_v_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module Faltungscodierer_gesamt_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg input;
reg reset;
// wires                                               
wire [1:0] out_a;
wire out_high;
wire out_low;
wire [1:0] out_v;

wire sampler;                             

// assign statements (if any)                          
Faltungscodierer_gesamt i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.\input (input),
	.out_a(out_a),
	.out_high(out_high),
	.out_low(out_low),
	.reset(reset)
);

// input
initial
begin
	input = 1'b0;
	input = #100000 1'b1;
	input = #20000 1'b0;
	input = #20000 1'b1;
	input = #60000 1'b0;
	input = #40000 1'b1;
	input = #20000 1'b0;
	input = #120000 1'b1;
	input = #40000 1'b0;
	input = #80000 1'b1;
	input = #80000 1'b0;
	input = #80000 1'b1;
	input = #140000 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #540000 1'b1;
end 

Faltungscodierer_gesamt_vlg_sample_tst tb_sample (
	.clock(clock),
	.input(input),
	.reset(reset),
	.sampler_tx(sampler)
);

Faltungscodierer_gesamt_vlg_check_tst tb_out(
	.out_a(out_a),
	.out_high(out_high),
	.out_low(out_low),
	.out_v(out_v),
	.sampler_rx(sampler)
);
endmodule

