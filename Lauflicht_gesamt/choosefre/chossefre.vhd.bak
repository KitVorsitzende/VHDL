LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY clockdivider IS
  PORT (
  quicker,slower,clk_basis,reset:IN STD_Logic;
  --counter_test:OUT STD_LOGIC_VECTOR(3 downto 0);
  clk:OUT STD_LOGIC
  );
END clockdivider;

ARCHITECTURE Behavior OF clockdivider IS
  
  SIGNAL div:UNSIGNED(15 downto 0);----jede Stelle ist verteilte niederige Frequenz
  SIGNAL counter:SIGNED(3 downto 0);
  SIGNAL press:STD_LOGIC;
  BEGIN 	
    
	 PROCESS_div:PROCESS(clk_basis,reset)
	 BEGIN
	   IF rising_edge(clk_basis) THEN
		  div<=div+1;
		END IF;
		press<=quicker or slower;
    END PROCESS;
	 
	 PROCESS_divide:PROCESS(reset,quicker,slower,clk_basis,press)
	 BEGIN    
	   IF reset='1' THEN 
	     counter<=(others=>'0'); 

		ELSIF rising_edge(press) THEN
		     IF slower='1' THEN
	        counter<=counter+1;
		     ELSIF quicker='1' THEN
		     counter<=counter-1;
		    END IF;
	   END IF;
	 --END PROCESS;
	 
	 --PROCESS_choose:PROCESS(counter,div)
	 --BEGIN
	   CASE counter IS
		WHEN "1000" => clk<=div(0);
		WHEN "1001" => clk<=div(1);
		WHEN "1010" => clk<=div(2);
		WHEN "1011" => clk<=div(3);
		WHEN "1100" => clk<=div(4);
		WHEN "1101" => clk<=div(5);
		WHEN "1110" => clk<=div(6);
		WHEN "1111" => clk<=div(7);
		WHEN "0000" => clk<=div(8);
		WHEN "0001" => clk<=div(9);
		WHEN "0010" => clk<=div(10);
		WHEN "0011" => clk<=div(11);
		WHEN "0100" => clk<=div(12);
		WHEN "0101" => clk<=div(13);
		WHEN "0110" => clk<=div(14);
		WHEN "0111" => clk<=div(15);
		END CASE;
	 END PROCESS;	
		
	 
	 --counter_test<=STD_LOGIC_VECTOR(counter);
END Behavior;
	 
	  

			  