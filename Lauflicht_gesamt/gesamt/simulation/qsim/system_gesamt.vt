// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/04/2019 23:24:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    system_gesamt
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module system_gesamt_vlg_sample_tst(
	clk_original,
	dip_schalter,
	taster1,
	taster2,
	taster3,
	taster4,
	sampler_tx
);
input  clk_original;
input [7:0] dip_schalter;
input  taster1;
input  taster2;
input  taster3;
input  taster4;
output sampler_tx;

reg sample;
time current_time;
always @(clk_original or dip_schalter or taster1 or taster2 or taster3 or taster4)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module system_gesamt_vlg_check_tst (
	leds,
	output_high,
	output_low,
	sampler_rx
);
input [7:0] leds;
input [7:0] output_high;
input [7:0] output_low;
input sampler_rx;

reg [7:0] leds_expected;
reg [7:0] output_high_expected;
reg [7:0] output_low_expected;

reg [7:0] leds_prev;
reg [7:0] output_high_prev;
reg [7:0] output_low_prev;

reg [7:0] leds_expected_prev;

reg [7:0] last_leds_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	leds_prev = leds;
	output_high_prev = output_high;
	output_low_prev = output_low;
end

// update expected /o prevs

always @(trigger)
begin
	leds_expected_prev = leds_expected;
end


// expected leds[ 7 ]
initial
begin
	leds_expected[7] = 1'bX;
	leds_expected[7] = #499000 1'b0;
end 
// expected leds[ 6 ]
initial
begin
	leds_expected[6] = 1'bX;
	leds_expected[6] = #499000 1'b0;
end 
// expected leds[ 5 ]
initial
begin
	leds_expected[5] = 1'bX;
	leds_expected[5] = #499000 1'b0;
end 
// expected leds[ 4 ]
initial
begin
	leds_expected[4] = 1'bX;
	leds_expected[4] = #499000 1'b0;
end 
// expected leds[ 3 ]
initial
begin
	leds_expected[3] = 1'bX;
	leds_expected[3] = #499000 1'b0;
end 
// expected leds[ 2 ]
initial
begin
	leds_expected[2] = 1'bX;
	leds_expected[2] = #499000 1'b0;
end 
// expected leds[ 1 ]
initial
begin
	leds_expected[1] = 1'bX;
	leds_expected[1] = #499000 1'b0;
end 
// expected leds[ 0 ]
initial
begin
	leds_expected[0] = 1'bX;
	leds_expected[0] = #499000 1'b0;
end 
// generate trigger
always @(leds_expected or leds or output_high_expected or output_high or output_low_expected or output_low)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected leds = %b | expected output_high = %b | expected output_low = %b | ",leds_expected_prev,output_high_expected_prev,output_low_expected_prev);
	$display("| real leds = %b | real output_high = %b | real output_low = %b | ",leds_prev,output_high_prev,output_low_prev);
`endif
	if (
		( leds_expected_prev[0] !== 1'bx ) && ( leds_prev[0] !== leds_expected_prev[0] )
		&& ((leds_expected_prev[0] !== last_leds_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds_exp[0] = leds_expected_prev[0];
	end
	if (
		( leds_expected_prev[1] !== 1'bx ) && ( leds_prev[1] !== leds_expected_prev[1] )
		&& ((leds_expected_prev[1] !== last_leds_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds_exp[1] = leds_expected_prev[1];
	end
	if (
		( leds_expected_prev[2] !== 1'bx ) && ( leds_prev[2] !== leds_expected_prev[2] )
		&& ((leds_expected_prev[2] !== last_leds_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds_exp[2] = leds_expected_prev[2];
	end
	if (
		( leds_expected_prev[3] !== 1'bx ) && ( leds_prev[3] !== leds_expected_prev[3] )
		&& ((leds_expected_prev[3] !== last_leds_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds_exp[3] = leds_expected_prev[3];
	end
	if (
		( leds_expected_prev[4] !== 1'bx ) && ( leds_prev[4] !== leds_expected_prev[4] )
		&& ((leds_expected_prev[4] !== last_leds_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds_exp[4] = leds_expected_prev[4];
	end
	if (
		( leds_expected_prev[5] !== 1'bx ) && ( leds_prev[5] !== leds_expected_prev[5] )
		&& ((leds_expected_prev[5] !== last_leds_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds_exp[5] = leds_expected_prev[5];
	end
	if (
		( leds_expected_prev[6] !== 1'bx ) && ( leds_prev[6] !== leds_expected_prev[6] )
		&& ((leds_expected_prev[6] !== last_leds_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds_exp[6] = leds_expected_prev[6];
	end
	if (
		( leds_expected_prev[7] !== 1'bx ) && ( leds_prev[7] !== leds_expected_prev[7] )
		&& ((leds_expected_prev[7] !== last_leds_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds_exp[7] = leds_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module system_gesamt_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_original;
reg [7:0] dip_schalter;
reg taster1;
reg taster2;
reg taster3;
reg taster4;
// wires                                               
wire [7:0] leds;
wire [7:0] output_high;
wire [7:0] output_low;

wire sampler;                             

// assign statements (if any)                          
system_gesamt i1 (
// port map - connection between master ports and signals/registers   
	.clk_original(clk_original),
	.dip_schalter(dip_schalter),
	.leds(leds),
	.output_high(output_high),
	.output_low(output_low),
	.taster1(taster1),
	.taster2(taster2),
	.taster3(taster3),
	.taster4(taster4)
);

// clk_original
always
begin
	clk_original = 1'b0;
	clk_original = #5000 1'b1;
	#5000;
end 

// taster1
initial
begin
	taster1 = 1'b0;
end 

// taster2
initial
begin
	taster2 = 1'b0;
end 

// taster3
initial
begin
	taster3 = 1'b0;
end 

// taster4
initial
begin
	taster4 = 1'b0;
end 
// dip_schalter[ 7 ]
initial
begin
	dip_schalter[7] = 1'b1;
end 
// dip_schalter[ 6 ]
initial
begin
	dip_schalter[6] = 1'b1;
end 
// dip_schalter[ 5 ]
initial
begin
	dip_schalter[5] = 1'b0;
end 
// dip_schalter[ 4 ]
initial
begin
	dip_schalter[4] = 1'b0;
end 
// dip_schalter[ 3 ]
initial
begin
	dip_schalter[3] = 1'b1;
end 
// dip_schalter[ 2 ]
initial
begin
	dip_schalter[2] = 1'b0;
end 
// dip_schalter[ 1 ]
initial
begin
	dip_schalter[1] = 1'b0;
end 
// dip_schalter[ 0 ]
initial
begin
	dip_schalter[0] = 1'b0;
end 

system_gesamt_vlg_sample_tst tb_sample (
	.clk_original(clk_original),
	.dip_schalter(dip_schalter),
	.taster1(taster1),
	.taster2(taster2),
	.taster3(taster3),
	.taster4(taster4),
	.sampler_tx(sampler)
);

system_gesamt_vlg_check_tst tb_out(
	.leds(leds),
	.output_high(output_high),
	.output_low(output_low),
	.sampler_rx(sampler)
);
endmodule

