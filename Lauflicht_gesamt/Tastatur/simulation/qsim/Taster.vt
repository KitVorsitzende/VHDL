// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/28/2019 17:48:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Taster
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Taster_vlg_sample_tst(
	dip_schalter,
	taster1,
	taster2,
	taster3,
	taster4,
	sampler_tx
);
input [7:0] dip_schalter;
input  taster1;
input  taster2;
input  taster3;
input  taster4;
output sampler_tx;

reg sample;
time current_time;
always @(dip_schalter or taster1 or taster2 or taster3 or taster4)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Taster_vlg_check_tst (
	module,
	reset,
	stop,
	sampler_rx
);
input [7:0] module;
input  reset;
input  stop;
input sampler_rx;

reg [7:0] module_expected;
reg  reset_expected;
reg  stop_expected;

reg [7:0] module_prev;
reg  reset_prev;
reg  stop_prev;

reg [7:0] module_expected_prev;
reg  reset_expected_prev;
reg  stop_expected_prev;

reg [7:0] last_module_exp;
reg  last_reset_exp;
reg  last_stop_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	module_prev = module;
	reset_prev = reset;
	stop_prev = stop;
end

// update expected /o prevs

always @(trigger)
begin
	module_expected_prev = module_expected;
	reset_expected_prev = reset_expected;
	stop_expected_prev = stop_expected;
end



// expected reset
initial
begin
	reset_expected = 1'bX;
end 

// expected stop
initial
begin
	stop_expected = 1'bX;
end 
// expected \module [ 7 ]
initial
begin
	module_expected[7] = 1'bX;
end 
// expected \module [ 6 ]
initial
begin
	module_expected[6] = 1'bX;
end 
// expected \module [ 5 ]
initial
begin
	module_expected[5] = 1'bX;
end 
// expected \module [ 4 ]
initial
begin
	module_expected[4] = 1'bX;
end 
// expected \module [ 3 ]
initial
begin
	module_expected[3] = 1'bX;
end 
// expected \module [ 2 ]
initial
begin
	module_expected[2] = 1'bX;
end 
// expected \module [ 1 ]
initial
begin
	module_expected[1] = 1'bX;
end 
// expected \module [ 0 ]
initial
begin
	module_expected[0] = 1'bX;
end 
// generate trigger
always @(module_expected or module or reset_expected or reset or stop_expected or stop)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected module = %b | expected reset = %b | expected stop = %b | ",module_expected_prev,reset_expected_prev,stop_expected_prev);
	$display("| real module = %b | real reset = %b | real stop = %b | ",module_prev,reset_prev,stop_prev);
`endif
	if (
		( module_expected_prev[0] !== 1'bx ) && ( module_prev[0] !== module_expected_prev[0] )
		&& ((module_expected_prev[0] !== last_module_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port module[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", module_expected_prev);
		$display ("     Real value = %b", module_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_module_exp[0] = module_expected_prev[0];
	end
	if (
		( module_expected_prev[1] !== 1'bx ) && ( module_prev[1] !== module_expected_prev[1] )
		&& ((module_expected_prev[1] !== last_module_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port module[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", module_expected_prev);
		$display ("     Real value = %b", module_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_module_exp[1] = module_expected_prev[1];
	end
	if (
		( module_expected_prev[2] !== 1'bx ) && ( module_prev[2] !== module_expected_prev[2] )
		&& ((module_expected_prev[2] !== last_module_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port module[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", module_expected_prev);
		$display ("     Real value = %b", module_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_module_exp[2] = module_expected_prev[2];
	end
	if (
		( module_expected_prev[3] !== 1'bx ) && ( module_prev[3] !== module_expected_prev[3] )
		&& ((module_expected_prev[3] !== last_module_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port module[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", module_expected_prev);
		$display ("     Real value = %b", module_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_module_exp[3] = module_expected_prev[3];
	end
	if (
		( module_expected_prev[4] !== 1'bx ) && ( module_prev[4] !== module_expected_prev[4] )
		&& ((module_expected_prev[4] !== last_module_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port module[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", module_expected_prev);
		$display ("     Real value = %b", module_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_module_exp[4] = module_expected_prev[4];
	end
	if (
		( module_expected_prev[5] !== 1'bx ) && ( module_prev[5] !== module_expected_prev[5] )
		&& ((module_expected_prev[5] !== last_module_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port module[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", module_expected_prev);
		$display ("     Real value = %b", module_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_module_exp[5] = module_expected_prev[5];
	end
	if (
		( module_expected_prev[6] !== 1'bx ) && ( module_prev[6] !== module_expected_prev[6] )
		&& ((module_expected_prev[6] !== last_module_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port module[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", module_expected_prev);
		$display ("     Real value = %b", module_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_module_exp[6] = module_expected_prev[6];
	end
	if (
		( module_expected_prev[7] !== 1'bx ) && ( module_prev[7] !== module_expected_prev[7] )
		&& ((module_expected_prev[7] !== last_module_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port module[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", module_expected_prev);
		$display ("     Real value = %b", module_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_module_exp[7] = module_expected_prev[7];
	end
	if (
		( reset_expected_prev !== 1'bx ) && ( reset_prev !== reset_expected_prev )
		&& ((reset_expected_prev !== last_reset_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reset :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reset_expected_prev);
		$display ("     Real value = %b", reset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reset_exp = reset_expected_prev;
	end
	if (
		( stop_expected_prev !== 1'bx ) && ( stop_prev !== stop_expected_prev )
		&& ((stop_expected_prev !== last_stop_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stop :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stop_expected_prev);
		$display ("     Real value = %b", stop_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_stop_exp = stop_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Taster_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] dip_schalter;
reg taster1;
reg taster2;
reg taster3;
reg taster4;
// wires                                               
wire [7:0] module;
wire reset;
wire stop;

wire sampler;                             

// assign statements (if any)                          
Taster i1 (
// port map - connection between master ports and signals/registers   
	.dip_schalter(dip_schalter),
	.\module (module),
	.reset(reset),
	.stop(stop),
	.taster1(taster1),
	.taster2(taster2),
	.taster3(taster3),
	.taster4(taster4)
);

// taster3
initial
begin
	taster3 = 1'b0;
	taster3 = #100000 1'b1;
	taster3 = #100000 1'b0;
end 

// taster4
initial
begin
	taster4 = 1'b0;
	taster4 = #300000 1'b1;
	taster4 = #100000 1'b0;
end 
// dip_schalter[ 7 ]
initial
begin
	dip_schalter[7] = 1'b0;
end 
// dip_schalter[ 6 ]
initial
begin
	dip_schalter[6] = 1'b1;
end 
// dip_schalter[ 5 ]
initial
begin
	dip_schalter[5] = 1'b0;
end 
// dip_schalter[ 4 ]
initial
begin
	dip_schalter[4] = 1'b1;
end 
// dip_schalter[ 3 ]
initial
begin
	dip_schalter[3] = 1'b0;
end 
// dip_schalter[ 2 ]
initial
begin
	dip_schalter[2] = 1'b0;
end 
// dip_schalter[ 1 ]
initial
begin
	dip_schalter[1] = 1'b0;
end 
// dip_schalter[ 0 ]
initial
begin
	dip_schalter[0] = 1'b0;
end 

Taster_vlg_sample_tst tb_sample (
	.dip_schalter(dip_schalter),
	.taster1(taster1),
	.taster2(taster2),
	.taster3(taster3),
	.taster4(taster4),
	.sampler_tx(sampler)
);

Taster_vlg_check_tst tb_out(
	.module(module),
	.reset(reset),
	.stop(stop),
	.sampler_rx(sampler)
);
endmodule

